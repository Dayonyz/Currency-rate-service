version: "3.9"

volumes:
    code:
    db:
    queue:
    cache:

services:
    php:
        build:
            context: ./
            dockerfile: .docker/php-swoole/Dockerfile
            args:
                - USER_DOCKER_ID=${DOCKER_USER_ID}
                - GROUP_DOCKER_ID=${DOCKER_GROUP_ID}
                - PROJECT_PATH=${DOCKER_CODE_FOLDER}
        environment:
            APP_ENV: production
        volumes:
            - ./.docker/php-swoole/php.ini:/usr/local/etc/php/php.ini
            - code:${DOCKER_CODE_FOLDER}:delegated
        working_dir: ${DOCKER_CODE_FOLDER}
        depends_on:
            mysql:
                condition: service_healthy
            redis-cache:
                condition: service_healthy
        networks:
            - backend-octane
    php-worker:
        build:
            context: ./
            dockerfile: .docker/php-swoole/Dockerfile
            args:
                - USER_DOCKER_ID=${DOCKER_USER_ID}
                - GROUP_DOCKER_ID=${DOCKER_GROUP_ID}
                - PROJECT_PATH=${DOCKER_CODE_FOLDER}
        environment:
            APP_ENV: production
        volumes:
            - ./.docker/php-swoole/php.ini:/usr/local/etc/php/php.ini
            - code:${DOCKER_CODE_FOLDER}:delegated
        working_dir: ${DOCKER_CODE_FOLDER}
        #command: php artisan octane:start --server=swoole --host=0.0.0.0 --port=8000 --workers=16 --task-workers=4 --max-requests=5400 --log-level=debug >> /proc/1/fd/1 2>&1
        command: php artisan octane:start --server=swoole --host=0.0.0.0 --port=8000 --workers=16 --task-workers=4 --max-requests=5400
        depends_on:
            mysql:
                condition: service_healthy
            queue-worker:
                condition: service_healthy
            redis-cache:
                condition: service_healthy
        ports:
            - "${DOCKER_NGINX_PORT}:8000"
        networks:
            - backend-octane
        deploy:
            replicas: 1
        healthcheck:
            test: ["CMD-SHELL", "php -r 'exit((@fsockopen(\"127.0.0.1\",8000)) ? 0 : 1);'"]
            interval: 3s
            timeout: 2s
            retries: 5
            start_period: 5s
    mysql:
        image: mysql:8.0
        container_name: "${DOCKER_APP_SLUG}-mysql"
        ports:
            - "${DOCKER_MYSQL_PORT}:3306"
        user: "${DOCKER_USER_ID}:${DOCKER_GROUP_ID}"
        volumes:
            - ./.docker/mysql/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
            - db:/var/lib/mysql:delegated
        command: --default-authentication-plugin=mysql_native_password
        environment:
            MYSQL_DATABASE: "${DB_DATABASE}"
            MYSQL_USER: "${DB_USERNAME}"
            MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
            MYSQL_PASSWORD: "${DB_PASSWORD}"
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u${DB_USERNAME}", "-p${DB_PASSWORD}" ]
            interval: 3s
            timeout: 5s
            retries: 10
            start_period: 3s
        networks:
            - backend-octane
    redis-cache:
        image: redis:alpine
        container_name: "${DOCKER_APP_SLUG}-redis-cache"
        ports:
            - "${DOCKER_REDIS_CACHE_PORT}:6379"
        volumes:
            - cache:/cache
            - ./.docker/redis/redis-cache.conf:/usr/local/etc/redis/redis.conf
        command: redis-server /usr/local/etc/redis/redis.conf
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 3s
            timeout: 5s
            retries: 10
        networks:
            - backend-octane

    redis-queue:
        image: redis:alpine
        container_name: "${DOCKER_APP_SLUG}-redis-queue"
        ports:
            - "${DOCKER_REDIS_PORT}:6379"
        volumes:
            - queue:/queue
            - ./.docker/redis/redis-queue.conf:/usr/local/etc/redis/redis.conf
        command: redis-server /usr/local/etc/redis/redis.conf
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 3s
            timeout: 5s
            retries: 10
        networks:
            - backend-octane

    queue-worker:
        build:
            context: ./
            dockerfile: .docker/php-swoole/Dockerfile
            args:
                - USER_DOCKER_ID=${DOCKER_USER_ID}
                - GROUP_DOCKER_ID=${DOCKER_GROUP_ID}
                - PROJECT_PATH=${DOCKER_CODE_FOLDER}
        container_name: "${DOCKER_APP_SLUG}-queue"
        environment:
            APP_ENV: ${APP_ENV}
            SESSION_DRIVER: ${SESSION_DRIVER}
            CACHE_STORE: ${CACHE_STORE}
            BULWARK_CACHE_STORE: ${BULWARK_CACHE_STORE}
            REPOSITORY_CACHE_STORE: ${REPOSITORY_CACHE_STORE}
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
        volumes:
            - ./:${DOCKER_CODE_FOLDER}:delegated
            - ./.docker/php-swoole/php.ini:/usr/local/etc/php/php.ini
        working_dir: ${DOCKER_CODE_FOLDER}
        #command: php artisan queue:work redis --queue=bulwark --sleep=3 --tries=3 >> /proc/1/fd/1 2>&1
        command: php artisan queue:work redis --queue=bulwark --sleep=3 --tries=3
        healthcheck:
            test: [ "CMD", "pgrep", "php" ]
            interval: 5s
            timeout: 5s
            retries: 3
        depends_on:
            redis-cache:
                condition: service_healthy
            mysql:
                condition: service_healthy
        networks:
            - backend-octane

networks:
    backend-octane:
        name: backend-octane
        driver: bridge

x-mutagen:
    sync:
        defaults:
            mode: "two-way-resolved"
            configurationBeta:
                permissions:
                    defaultFileMode: 0666
                    defaultDirectoryMode: 0666
                    defaultOwner: "id:${DOCKER_USER_ID}"
                    defaultGroup: "id:${DOCKER_GROUP_ID}"
            ignore:
                vcs: true
        code:
            alpha: "./"
            beta: "volume://code"
            mode: "two-way-resolved"
            configurationBeta:
                permissions:
                    defaultFileMode: 0666
                    defaultDirectoryMode: 0777
                    defaultOwner: "id:${DOCKER_USER_ID}"
                    defaultGroup: "id:${DOCKER_GROUP_ID}"
        db:
            alpha: "./.docker/mysql/volumes"
            beta: "volume://db"
            mode: "two-way-resolved"
            configurationBeta:
                permissions:
                    defaultFileMode: 0666
                    defaultDirectoryMode: 0777
                    defaultOwner: "id:${DOCKER_USER_ID}"
                    defaultGroup: "id:${DOCKER_GROUP_ID}"
        queue:
            alpha: "./.docker/redis/queue"
            beta: "volume://queue"
            mode: "two-way-resolved"
            configurationBeta:
                permissions:
                    defaultFileMode: 0666
                    defaultDirectoryMode: 0777
                    defaultOwner: "id:${DOCKER_USER_ID}"
                    defaultGroup: "id:${DOCKER_GROUP_ID}"
        cache:
            alpha: "./.docker/redis/cache"
            beta: "volume://cache"
            mode: "two-way-resolved"
            configurationBeta:
                permissions:
                    defaultFileMode: 0666
                    defaultDirectoryMode: 0777
                    defaultOwner: "id:${DOCKER_USER_ID}"
                    defaultGroup: "id:${DOCKER_GROUP_ID}"